class Node:
    def __init__(self, value) -> None:
        self.value = value
        self.prev = None
        self.next = None

class DoubleLinkedList:
    def __init__(self, value) -> None:
        new_node = Node(value)
        self.head = new_node
        self.tail = new_node
        self.length = 1
        
    def print_list(self):
        temp = self.head
        while temp is not None:
            print(temp.value)
            temp = temp.next 

    def print_list_reverse(self):
        temp = self.tail
        while temp is not None:
            print(temp.value)
            temp = temp.prev    
        
    def append(self, value):
        new_node = Node(value)
        if self.head == None:
            self.head = new_node
            self.tail = new_node    
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        return True

    def pop(self):
        if self.head == None or self.length == 0:
            return False
        if self.length == 1:
            self.head = None
            self.tail = None
            self.length -= 1
            return True
        temp = self.tail.prev
        temp.next = None
        self.tail = temp
        self.length -= 1
        return True

    def prepend(self, value):
        new_node = Node(value)
        if self.length == 0:
            self.head = new_node
            self.tail = new_node
            self.length += 1
            return True
        new_node.next = self.head
        self.head.prev = new_node
        self.head = new_node
        self.length += 1
        return True

    def pop_first(self):
        if self.head == None:
            return False
        self.head = self.head.next
        self.head.prev = None 
        self.length -= 1     
        return True

    def get(self, index):
        if index < 0:
            index += self.length
        if abs(index) >= self.length:
            return False
        temp = self.head
        for _ in range(index):
            temp = temp.next
        return temp.value

    def set(self, index, value):
        if index < 0:
            index += self.length
        if abs(index) >= self.length:
            return False  
        temp = self.head
        for _ in range(index):
            temp = temp.next
        temp.value = value
        return True

    def insert(self, index, value):
        if index < 0:
            index += self.length
        if abs(index) >= self.length:
            return False  
        new_node = Node(value)
        temp = self.head
        pre = self.head
        for _ in range(index):
            pre = temp
            temp = temp.next
        pre.next = new_node
        new_node.prev = pre
        new_node.next = temp
        temp.prev = new_node
        return True
