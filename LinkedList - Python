class node:
    def __init__(self, value):
        self.value = value
        self.next = None

class LinkedList:
    def __init__(self, value):
        new_node = node(value)
        self.head = new_node
        self.tail = new_node
        self.lenght = 1

    def append(self, value):
        new_node = node(value)
        self.tail.next = new_node
        self.tail = new_node
        self.lenght += 1

    def print_list(self):
        if self.lenght == 0:
            return None
        temp = self.head
        while temp is not None:
            print(temp.value)
            temp = temp.next

    def pop(self):
        if self.lenght == 0:
            return None
        pre = self.head
        temp = self.head
        if self.lenght == 1:
            self.head = None
            self.tail = None
            self.lenght = 0
            return temp
        while temp.next is not None:
            pre = temp
            temp = temp.next
        pre.next = None
        self.tail = pre
        self.lenght = self.lenght - 1

    def prepend(self, value):
        new_node = node(value)
        if self.lenght == 0:
            self.head = new_node
            self.tail = new_node
            self.lenght += 1
        else:
            new_node.next = self.head
            self.head = new_node
            self.lenght += 1

    def pop_first(self):
        if self.lenght == 0:
            return None
        if self.lenght == 1:
            self.head = None
            self.tail = None
            self.lenght = 0
        self.head = self.head.next
        self.lenght -= 1

    def get_item_at_index(self, index):
        if index < 0:
            index += self.lenght
        if 0 <= index < self.lenght: 
            temp = self.head
            for _ in range(index):
                temp = temp.next
            return temp.value
        else:
            return None

    def insert_item_at_index(self, index, value):
        if index < 0:
            index += self.lenght
        if 0 <= index < self.lenght:
            if index == 0:
                self.prepend(value)
            elif index == self.lenght - 1:
                self.append(value)
            else:
                new_node = node(value)
                temp = self.head
                pre = self.head
                for _ in range(index):
                    pre = temp
                    temp = temp.next
                pre.next = new_node
                new_node.next = temp
                self.lenght += 1
        else:
            return None

    def remove_item_at_index(self, index):
        if index < 0:
            index += self.lenght
        if 0 <= index < self.lenght:
            if index == 0:
                self.pop_first()
                self.lenght -= 1
            elif index == self.lenght - 1:
                self.pop()
                self.lenght -= 1
            else:
                pre = self.head
                temp = self.head
                for _ in range(index):
                    pre = temp
                    temp = temp.next
                pre.next = temp.next
                self.lenght -= 1
                return temp.value
        else:
            return None        

    def get_tail(self):
        return self.tail.value

    def get_head(self):
        return self.head.value

my_ll = LinkedList(1)
